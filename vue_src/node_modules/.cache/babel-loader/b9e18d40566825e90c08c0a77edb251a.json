{"remainingRequest":"/root/zhenjinote/note/gaizao/node_modules/babel-loader/lib/index.js!/root/zhenjinote/note/gaizao/node_modules/eslint-loader/index.js??ref--13-0!/root/zhenjinote/note/gaizao/src/libs/validate.js","dependencies":[{"path":"/root/zhenjinote/note/gaizao/src/libs/validate.js","mtime":1564308862782},{"path":"/root/zhenjinote/note/gaizao/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/zhenjinote/note/gaizao/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/root/zhenjinote/note/gaizao/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import http  from '@/libs/http'\nimport AES  from '@/libs/crypto'\n\n/* 是否是邮箱 */\nexport function isemail (rule, value, callback) {\n    const reg = /^[a-z0-9](?:[-_.+]?[a-z0-9]+)*@.*?\\.com$/\n    if (!reg.test(value.trim())) {\n        return callback(new Error('请输入合法邮箱'));   \n    }\n    else {\n        let data = {\n            'type': 'email', \n            'data': value\n        }\n        data = JSON.stringify(data)\n        let params = {'data': AES.Encrypt(data)}\n        http.post('/api/query', params).then((res) => {\n            res.data = eval('(' + res.data + ')')\n            switch(res.data.code ){\n                case 'Z1001':\n                return callback(new Error('系统异常'))\n                case 'Z1002':\n                return callback(new Error('请求方法异常'))\n                case 'Z1007':\n                return callback(new Error('邮箱已注册'))\n                default:\n                callback()\n            }\n        })\n    }\n}\n\n/* 注册时用户名规则 */\nexport function isusername (rule, value, callback) {\n    const reg = /^[A-Za-z0-9]{1,6}$/\n    if(!reg.test(value.trim())) {\n        return callback(new Error('用户名输入错误'));\n    }\n    else {\n        let data = {\n            'type': 'username', \n            'data': value\n        }\n        data = JSON.stringify(data)\n        let params = {'data': AES.Encrypt(data)}\n        http.post('/api/query', params).then((res) => {\n            res.data = eval('(' + res.data + ')');\n            switch(res.data.code ){\n                case 'Z1001':\n                return callback(new Error('系统异常'))\n                case 'Z1002':\n                return callback(new Error('请求方法异常'))\n                case 'Z1006':\n                return callback(new Error('用户名已注册'))\n                default:\n                callback()\n            }\n        })\n    }\n  }\n\nexport function loginusername (rule, value, callback) {\n    const reg = /^[A-Za-z0-9]{1,6}$/\n    if(!reg.test(value.trim())) {\n        return callback(new Error('用户名输入错误'));\n    }\n    else {\n        callback()\n        }\n}\n\n/* 注册码长度是否达到要求 */\nexport function ischecknum(rule, value, callback) {\n    const reg = /^[A-Za-z0-9]{6}$/\n    if (!reg.test(value.trim())) {\n        return callback(new Error('注册码输入错误'));\n    }\n    else {\n        callback()\n    }\n}\n\n/* 密码长度是否达到要求 */\nexport function ispassword(rule, value, callback) {\n    const reg = /^[A-Za-z0-9]{8,16}$/\n    if (!reg.test(value.trim())) {\n        return callback(new Error('密码输入错误'));\n    }\n    else {\n        callback()\n        }\n}",null]}