{"remainingRequest":"/root/zhenjinote/note/gaizao/node_modules/babel-loader/lib/index.js!/root/zhenjinote/note/gaizao/node_modules/eslint-loader/index.js??ref--13-0!/root/zhenjinote/note/gaizao/src/libs/http.js","dependencies":[{"path":"/root/zhenjinote/note/gaizao/src/libs/http.js","mtime":1564290288347},{"path":"/root/zhenjinote/note/gaizao/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/zhenjinote/note/gaizao/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/root/zhenjinote/note/gaizao/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios'\nimport qs from 'qs'\n\naxios.defaults.timeout = 5000;                        //响应时间\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';        //配置请求头\naxios.defaults.baseURL = '';   //配置接口地址\n\n//POST传参序列化(添加请求拦截器)\naxios.interceptors.request.use((config) => {\n    //在发送请求之前做某件事\n    if(config.method  === 'post'){\n        config.data = qs.stringify(config.data);\n    }\n    return config;\n},(error) =>{\n    console.log('错误的传参')\n    return Promise.reject(error);\n});\n\n//返回状态判断(添加响应拦截器)\naxios.interceptors.response.use((res) =>{\n    //对响应数据做些事\n    if(!res.data.success){\n        return Promise.resolve(res);\n    }\n    return res;\n}, (error) => {\n    console.log('网络异常')\n    return Promise.reject(error);\n});\n\n//返回一个Promise(发送post请求)\nexport function post(url, params) {\n    return new Promise((resolve, reject) => {\n        axios.post(url, params)\n            .then(response => {\n                resolve(response);\n            }, err => {\n                reject(err);\n            })\n            .catch((error) => {\n                reject(error)\n            })\n    })\n}\n////返回一个Promise(发送get请求)\nexport function get(url, param) {\n    return new Promise((resolve, reject) => {\n        axios.get(url, {params: param})\n            .then(response => {\n                resolve(response)\n            }, err => {\n                reject(err)\n            })\n            .catch((error) => {\n                reject(error)\n            })\n    })\n}\nexport default {\n    post,\n    get\n}",null]}