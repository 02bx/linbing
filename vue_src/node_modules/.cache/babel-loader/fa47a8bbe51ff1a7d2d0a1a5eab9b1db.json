{"remainingRequest":"/root/zhenjinote/note/gaizao/node_modules/babel-loader/lib/index.js!/root/zhenjinote/note/gaizao/node_modules/eslint-loader/index.js??ref--13-0!/root/zhenjinote/note/gaizao/src/libs/http.js","dependencies":[{"path":"/root/zhenjinote/note/gaizao/src/libs/http.js","mtime":1564290288347},{"path":"/root/zhenjinote/note/gaizao/.babelrc","mtime":1557223479000},{"path":"/root/zhenjinote/note/gaizao/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/zhenjinote/note/gaizao/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/root/zhenjinote/note/gaizao/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport qs from 'qs';\naxios.defaults.timeout = 5000; //响应时间\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8'; //配置请求头\n\naxios.defaults.baseURL = ''; //配置接口地址\n//POST传参序列化(添加请求拦截器)\n\naxios.interceptors.request.use(function (config) {\n  //在发送请求之前做某件事\n  if (config.method === 'post') {\n    config.data = qs.stringify(config.data);\n  }\n\n  return config;\n}, function (error) {\n  console.log('错误的传参');\n  return Promise.reject(error);\n}); //返回状态判断(添加响应拦截器)\n\naxios.interceptors.response.use(function (res) {\n  //对响应数据做些事\n  if (!res.data.success) {\n    return Promise.resolve(res);\n  }\n\n  return res;\n}, function (error) {\n  console.log('网络异常');\n  return Promise.reject(error);\n}); //返回一个Promise(发送post请求)\n\nexport function post(url, params) {\n  return new Promise(function (resolve, reject) {\n    axios.post(url, params).then(function (response) {\n      resolve(response);\n    }, function (err) {\n      reject(err);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n} ////返回一个Promise(发送get请求)\n\nexport function get(url, param) {\n  return new Promise(function (resolve, reject) {\n    axios.get(url, {\n      params: param\n    }).then(function (response) {\n      resolve(response);\n    }, function (err) {\n      reject(err);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\nexport default {\n  post: post,\n  get: get\n};",{"version":3,"sources":["/root/zhenjinote/note/gaizao/src/libs/http.js"],"names":["axios","qs","defaults","timeout","headers","post","baseURL","interceptors","request","use","config","method","data","stringify","error","console","log","Promise","reject","response","res","success","resolve","url","params","then","err","catch","get","param"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AAEAD,KAAK,CAACE,QAAN,CAAeC,OAAf,GAAyB,IAAzB,C,CAAsD;;AACtDH,KAAK,CAACE,QAAN,CAAeE,OAAf,CAAuBC,IAAvB,CAA4B,cAA5B,IAA8C,iDAA9C,C,CAAwG;;AACxGL,KAAK,CAACE,QAAN,CAAeI,OAAf,GAAyB,EAAzB,C,CAA+B;AAE/B;;AACAN,KAAK,CAACO,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAACC,MAAD,EAAY;AACvC;AACA,MAAGA,MAAM,CAACC,MAAP,KAAmB,MAAtB,EAA6B;AACzBD,IAAAA,MAAM,CAACE,IAAP,GAAcX,EAAE,CAACY,SAAH,CAAaH,MAAM,CAACE,IAApB,CAAd;AACH;;AACD,SAAOF,MAAP;AACH,CAND,EAME,UAACI,KAAD,EAAU;AACRC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH,CATD,E,CAWA;;AACAd,KAAK,CAACO,YAAN,CAAmBY,QAAnB,CAA4BV,GAA5B,CAAgC,UAACW,GAAD,EAAQ;AACpC;AACA,MAAG,CAACA,GAAG,CAACR,IAAJ,CAASS,OAAb,EAAqB;AACjB,WAAOJ,OAAO,CAACK,OAAR,CAAgBF,GAAhB,CAAP;AACH;;AACD,SAAOA,GAAP;AACH,CAND,EAMG,UAACN,KAAD,EAAW;AACVC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH,CATD,E,CAWA;;AACA,OAAO,SAAST,IAAT,CAAckB,GAAd,EAAmBC,MAAnB,EAA2B;AAC9B,SAAO,IAAIP,OAAJ,CAAY,UAACK,OAAD,EAAUJ,MAAV,EAAqB;AACpClB,IAAAA,KAAK,CAACK,IAAN,CAAWkB,GAAX,EAAgBC,MAAhB,EACKC,IADL,CACU,UAAAN,QAAQ,EAAI;AACdG,MAAAA,OAAO,CAACH,QAAD,CAAP;AACH,KAHL,EAGO,UAAAO,GAAG,EAAI;AACNR,MAAAA,MAAM,CAACQ,GAAD,CAAN;AACH,KALL,EAMKC,KANL,CAMW,UAACb,KAAD,EAAW;AACdI,MAAAA,MAAM,CAACJ,KAAD,CAAN;AACH,KARL;AASH,GAVM,CAAP;AAWH,C,CACD;;AACA,OAAO,SAASc,GAAT,CAAaL,GAAb,EAAkBM,KAAlB,EAAyB;AAC5B,SAAO,IAAIZ,OAAJ,CAAY,UAACK,OAAD,EAAUJ,MAAV,EAAqB;AACpClB,IAAAA,KAAK,CAAC4B,GAAN,CAAUL,GAAV,EAAe;AAACC,MAAAA,MAAM,EAAEK;AAAT,KAAf,EACKJ,IADL,CACU,UAAAN,QAAQ,EAAI;AACdG,MAAAA,OAAO,CAACH,QAAD,CAAP;AACH,KAHL,EAGO,UAAAO,GAAG,EAAI;AACNR,MAAAA,MAAM,CAACQ,GAAD,CAAN;AACH,KALL,EAMKC,KANL,CAMW,UAACb,KAAD,EAAW;AACdI,MAAAA,MAAM,CAACJ,KAAD,CAAN;AACH,KARL;AASH,GAVM,CAAP;AAWH;AACD,eAAe;AACXT,EAAAA,IAAI,EAAJA,IADW;AAEXuB,EAAAA,GAAG,EAAHA;AAFW,CAAf","sourcesContent":["import axios from 'axios'\nimport qs from 'qs'\n\naxios.defaults.timeout = 5000;                        //响应时间\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';        //配置请求头\naxios.defaults.baseURL = '';   //配置接口地址\n\n//POST传参序列化(添加请求拦截器)\naxios.interceptors.request.use((config) => {\n    //在发送请求之前做某件事\n    if(config.method  === 'post'){\n        config.data = qs.stringify(config.data);\n    }\n    return config;\n},(error) =>{\n    console.log('错误的传参')\n    return Promise.reject(error);\n});\n\n//返回状态判断(添加响应拦截器)\naxios.interceptors.response.use((res) =>{\n    //对响应数据做些事\n    if(!res.data.success){\n        return Promise.resolve(res);\n    }\n    return res;\n}, (error) => {\n    console.log('网络异常')\n    return Promise.reject(error);\n});\n\n//返回一个Promise(发送post请求)\nexport function post(url, params) {\n    return new Promise((resolve, reject) => {\n        axios.post(url, params)\n            .then(response => {\n                resolve(response);\n            }, err => {\n                reject(err);\n            })\n            .catch((error) => {\n                reject(error)\n            })\n    })\n}\n////返回一个Promise(发送get请求)\nexport function get(url, param) {\n    return new Promise((resolve, reject) => {\n        axios.get(url, {params: param})\n            .then(response => {\n                resolve(response)\n            }, err => {\n                reject(err)\n            })\n            .catch((error) => {\n                reject(error)\n            })\n    })\n}\nexport default {\n    post,\n    get\n}"]}]}