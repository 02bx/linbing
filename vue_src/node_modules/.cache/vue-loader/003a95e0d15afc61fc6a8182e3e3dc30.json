{"remainingRequest":"C:\\Users\\dscjh\\Desktop\\临兵\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\dscjh\\Desktop\\临兵\\vue\\src\\components\\findpassword-form\\findpassword.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\dscjh\\Desktop\\临兵\\vue\\src\\components\\findpassword-form\\findpassword.vue","mtime":1578383939736},{"path":"C:\\Users\\dscjh\\Desktop\\临兵\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\临兵\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\临兵\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\临兵\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {isemail, isusername, ischecknum, ispassword} from '@/libs/validate'\nimport RSA  from '@/libs/crypto'\nimport http  from '@/libs/http'\nexport default {\n  name: 'FindpasswordForm',\n  props: {\n    usernameRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isusername, min:1},\n        ]\n      }\n    },\n    emailRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isemail }\n        ]\n      }\n    },\n    checknumRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ischecknum }\n        ]\n      }\n    },\n    passwordRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ispassword }\n        ]\n      }\n    },\n    passwordconfirmRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ispassword }\n        ]\n      }\n    }\n  },\n  data () {\n    return {\n      capta: '',\n      form: {\n        username: '',\n        email: '',\n        checknum: '',\n        password: '',\n        passwordconfirm: ''\n      },\n      username: {\n        'type': 'username', \n        'data': ''\n      }\n    }\n  },\n  computed: {\n    rules () {\n      return {\n        username: this.usernameRules,\n        email: this.emailRules,\n        checknum: this.checknumRules,\n        password: this.passwordRules,\n        passwordconfirm: this.passwordconfirmRules\n      }\n    }\n  },\n  methods: {\n    handleusername () {\n      this.$refs.FindpasswordForm.validateField('username', (valid) => {\n        \n      })\n   },\n\n   handlemail () {\n      this.$refs.FindpasswordForm.validateField('email', (valid) => {\n      })\n   },\n\n    getchecknum () {\n      if (this.form.email== ''){\n        this.$refs.FindpasswordForm.validateField('email', (valid) => {\n        })\n      }\n      else{\n        let data = {\n          'type': 'email', \n          'data': this.form.email\n        }\n        data = JSON.stringify(data)\n        let params = {'data': RSA.Encrypt(data)}\n        http.post('/api/getchecknum', params).then((res) => {\n          res.data = eval('(' + res.data + ')')\n          switch(res.data.code ){\n            case'Z1000':\n            this.$Notice.success({\n                title: '发送邮件成功',\n                desc: '请打开邮件查收验证码 '\n            })\n            this.capta = res.data.data.capta\n            break\n            case 'Z1001':\n            this.$Notice.error({\n                title: '发送邮件失败',\n                desc: '系统发生异常,请稍后再次尝试'\n            })\n            break\n            case 'Z1002':\n            this.$Notice.error({\n                title: '发送邮件失败',\n                desc: '系统发生异常,请稍后再次尝试'\n            })\n            break\n            default:\n            break\n          }\n        })\n      }\n    },\n    handleSubmit () {\n     this.$refs.FindpasswordForm.validate( (valid) => {\n        if (valid) {\n          this.$emit('on-success-valid', {\n            username: this.form.username,\n            email: this.form.email,\n            password: this.form.password,\n            checknum: this.form.checknum,\n            capta: this.capta\n          })\n        }\n      })\n    },\n\n    ToLogin () {\n      setTimeout(() => {\n        this.$router.push({\n        path: '/login'\n        })\n      },1000)\n    }\n  }  \n}\n",{"version":3,"sources":["findpassword.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"findpassword.vue","sourceRoot":"src/components/findpassword-form","sourcesContent":["<template>\n  \n  <Form ref = \"FindpasswordForm\" :model=\"form\" :rules=\"rules\" @keydown.enter.native=\"handleSubmit\">\n    <FormItem prop = \"username\"> \n      <Input  @on-blur = \"handleusername()\" v-model=\"form.username\" placeholder=\"请输入用户名\">\n        <span slot=\"prepend\">\n          <Icon :size=\"16\" type=\"ios-contact\"></Icon>\n        </span>\n      </Input>\n    </FormItem>\n    <FormItem prop=\"email\">\n      <Input  @on-blur = \"handlemail()\"  v-model=\"form.email\" placeholder=\"请输入邮箱地址\">\n        <span slot=\"prepend\">\n          <Icon :size=\"16\" type=\"ios-mail\"></Icon>\n        </span>\n      </Input>\n    </FormItem>\n    <FormItem prop=\"checknum\">\n      <Input  v-model=\"form.checknum\"  placeholder=\"请输入验证码\"  style=\"width: 170px\">\n        <span slot=\"prepend\">\n          <Icon :size=\"16\" type=\"ios-key\"></Icon>\n        </span>\n      </Input>\n      <Button style=\"position:absolute; right: 0px; top: 2px;\" type=\"primary\" float: left @click=\"getchecknum\">获取验证码</Button>\n    </FormItem>\n    <FormItem prop=\"password\">\n      <Input type=\"password\" v-model=\"form.password\" placeholder=\"请输入新密码,8-16位字母数字\">\n        <span slot=\"prepend\">\n          <Icon :size=\"14\" type=\"md-lock\"></Icon>\n        </span>\n      </Input>\n    </FormItem>\n    <FormItem prop=\"passwordconfirm\">\n      <Input type=\"password\" v-model=\"form.passwordconfirm\" placeholder=\"请再次输入新密码,8-16位字母数字\">\n        <span slot=\"prepend\">\n          <Icon :size=\"14\" type=\"md-lock\"></Icon>\n        </span>\n      </Input>\n    </FormItem>\n    <FormItem>\n      <Button @click=\"handleSubmit\" type=\"primary\" long>重置密码</Button>\n    </FormItem>\n  </Form>\n</template>\n\n<script>\nimport {isemail, isusername, ischecknum, ispassword} from '@/libs/validate'\nimport RSA  from '@/libs/crypto'\nimport http  from '@/libs/http'\nexport default {\n  name: 'FindpasswordForm',\n  props: {\n    usernameRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isusername, min:1},\n        ]\n      }\n    },\n    emailRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isemail }\n        ]\n      }\n    },\n    checknumRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ischecknum }\n        ]\n      }\n    },\n    passwordRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ispassword }\n        ]\n      }\n    },\n    passwordconfirmRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ispassword }\n        ]\n      }\n    }\n  },\n  data () {\n    return {\n      capta: '',\n      form: {\n        username: '',\n        email: '',\n        checknum: '',\n        password: '',\n        passwordconfirm: ''\n      },\n      username: {\n        'type': 'username', \n        'data': ''\n      }\n    }\n  },\n  computed: {\n    rules () {\n      return {\n        username: this.usernameRules,\n        email: this.emailRules,\n        checknum: this.checknumRules,\n        password: this.passwordRules,\n        passwordconfirm: this.passwordconfirmRules\n      }\n    }\n  },\n  methods: {\n    handleusername () {\n      this.$refs.FindpasswordForm.validateField('username', (valid) => {\n        \n      })\n   },\n\n   handlemail () {\n      this.$refs.FindpasswordForm.validateField('email', (valid) => {\n      })\n   },\n\n    getchecknum () {\n      if (this.form.email== ''){\n        this.$refs.FindpasswordForm.validateField('email', (valid) => {\n        })\n      }\n      else{\n        let data = {\n          'type': 'email', \n          'data': this.form.email\n        }\n        data = JSON.stringify(data)\n        let params = {'data': RSA.Encrypt(data)}\n        http.post('/api/getchecknum', params).then((res) => {\n          res.data = eval('(' + res.data + ')')\n          switch(res.data.code ){\n            case'Z1000':\n            this.$Notice.success({\n                title: '发送邮件成功',\n                desc: '请打开邮件查收验证码 '\n            })\n            this.capta = res.data.data.capta\n            break\n            case 'Z1001':\n            this.$Notice.error({\n                title: '发送邮件失败',\n                desc: '系统发生异常,请稍后再次尝试'\n            })\n            break\n            case 'Z1002':\n            this.$Notice.error({\n                title: '发送邮件失败',\n                desc: '系统发生异常,请稍后再次尝试'\n            })\n            break\n            default:\n            break\n          }\n        })\n      }\n    },\n    handleSubmit () {\n     this.$refs.FindpasswordForm.validate( (valid) => {\n        if (valid) {\n          this.$emit('on-success-valid', {\n            username: this.form.username,\n            email: this.form.email,\n            password: this.form.password,\n            checknum: this.form.checknum,\n            capta: this.capta\n          })\n        }\n      })\n    },\n\n    ToLogin () {\n      setTimeout(() => {\n        this.$router.push({\n        path: '/login'\n        })\n      },1000)\n    }\n  }  \n}\n</script>\n"]}]}