{"remainingRequest":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\dscjh\\Desktop\\note\\vue\\src\\components\\register-form\\register-form.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\src\\components\\register-form\\register-form.vue","mtime":1573778874000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {isemail, isusername, ischecknum, ispassword} from '@/libs/validate'\nimport AES  from '@/libs/crypto'\nimport http  from '@/libs/http'\nexport default {\n  name: 'RegisterForm',\n  props: {\n    usernameRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isusername, min:1},\n        ]\n      }\n    },\n    emailRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isemail }\n        ]\n      }\n    },\n    checknumRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ischecknum }\n        ]\n      }\n    },\n    passwordRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ispassword }\n        ]\n      }\n    },\n    passwordconfirmRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ispassword }\n        ]\n      }\n    }\n  },\n  data () {\n    return {\n      capta: '',\n      form: {\n        username: '',\n        email: '',\n        checknum: '',\n        password: '',\n        passwordconfirm: ''\n      },\n      username: {\n        'type': 'username', \n        'data': ''\n      }\n    }\n  },\n  computed: {\n    rules () {\n      return {\n        username: this.usernameRules,\n        email: this.emailRules,\n        checknum: this.checknumRules,\n        password: this.passwordRules,\n        passwordconfirm: this.passwordconfirmRules\n      }\n    }\n  },\n  methods: {\n    handleusername () {\n      this.$refs.RegisterForm.validateField('username', (valid) => {\n        \n      })\n   },\n\n   handlemail () {\n      this.$refs.RegisterForm.validateField('email', (valid) => {\n      })\n   },\n\n    getchecknum () {\n      if (this.form.email== ''){\n        this.$refs.RegisterForm.validateField('email', (valid) => {\n        })\n      }\n      else{\n        let data = {\n          'type': 'email', \n          'data': this.form.email\n        }\n        data = JSON.stringify(data)\n        let params = {'data': AES.Encrypt(data)}\n        http.post('/api/getchecknum', params).then((res) => {\n          res.data = eval('(' + res.data + ')')\n          switch(res.data.code ){\n            case'Z1000':\n            this.$Notice.success({\n                title: '发送邮件成功',\n                desc: '请打开邮件查收验证码 '\n            })\n            this.capta = res.data.data.capta\n            break\n            case 'Z1001':\n            this.$Notice.error({\n                title: '发送邮件失败',\n                desc: '系统发生异常,请稍后再次尝试'\n            })\n            break\n            case 'Z1002':\n            this.$Notice.error({\n                title: '发送邮件失败',\n                desc: '系统发生异常,请稍后再次尝试'\n            })\n            break\n          }\n        })\n      }\n    },\n    handleSubmit () {\n     this.$refs.RegisterForm.validate( (valid) => {\n        if (valid) {\n          if (this.form.password != this.form.passwordconfirm){\n            this.$Notice.error({\n                title: '二次密码输入错误',\n                desc: '二次密码输入错误,请重新输入!'\n            })\n          }\n          else{\n            this.$emit('on-success-valid', {\n              username: this.form.username,\n              email: this.form.email,\n              password: this.form.password,\n              checknum: this.form.checknum,\n              capta: this.capta\n            })\n          }\n        }\n      })\n    },\n\n    ToLogin () {\n      setTimeout(() => {\n        this.$router.push({\n        path: '/login'\n        })\n      },1000)\n    }\n  }  \n}\n",null]}