{"remainingRequest":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\dscjh\\Desktop\\note\\vue\\src\\components\\findpassword-form\\findpassword.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\src\\components\\findpassword-form\\findpassword.vue","mtime":1578383939736},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\.babelrc","mtime":1569934280000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { isemail, isusername, ischecknum, ispassword } from '@/libs/validate';\nimport RSA from '@/libs/crypto';\nimport http from '@/libs/http';\nexport default {\n  name: 'FindpasswordForm',\n  props: {\n    usernameRules: {\n      type: Array,\n      default: function _default() {\n        return [{\n          required: true,\n          trigger: 'blur',\n          validator: isusername,\n          min: 1\n        }];\n      }\n    },\n    emailRules: {\n      type: Array,\n      default: function _default() {\n        return [{\n          required: true,\n          trigger: 'blur',\n          validator: isemail\n        }];\n      }\n    },\n    checknumRules: {\n      type: Array,\n      default: function _default() {\n        return [{\n          required: true,\n          trigger: 'blur',\n          validator: ischecknum\n        }];\n      }\n    },\n    passwordRules: {\n      type: Array,\n      default: function _default() {\n        return [{\n          required: true,\n          trigger: 'blur',\n          validator: ispassword\n        }];\n      }\n    },\n    passwordconfirmRules: {\n      type: Array,\n      default: function _default() {\n        return [{\n          required: true,\n          trigger: 'blur',\n          validator: ispassword\n        }];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      capta: '',\n      form: {\n        username: '',\n        email: '',\n        checknum: '',\n        password: '',\n        passwordconfirm: ''\n      },\n      username: {\n        'type': 'username',\n        'data': ''\n      }\n    };\n  },\n  computed: {\n    rules: function rules() {\n      return {\n        username: this.usernameRules,\n        email: this.emailRules,\n        checknum: this.checknumRules,\n        password: this.passwordRules,\n        passwordconfirm: this.passwordconfirmRules\n      };\n    }\n  },\n  methods: {\n    handleusername: function handleusername() {\n      this.$refs.FindpasswordForm.validateField('username', function (valid) {});\n    },\n    handlemail: function handlemail() {\n      this.$refs.FindpasswordForm.validateField('email', function (valid) {});\n    },\n    getchecknum: function getchecknum() {\n      var _this = this;\n\n      if (this.form.email == '') {\n        this.$refs.FindpasswordForm.validateField('email', function (valid) {});\n      } else {\n        var data = {\n          'type': 'email',\n          'data': this.form.email\n        };\n        data = JSON.stringify(data);\n        var params = {\n          'data': RSA.Encrypt(data)\n        };\n        http.post('/api/getchecknum', params).then(function (res) {\n          res.data = eval('(' + res.data + ')');\n\n          switch (res.data.code) {\n            case 'Z1000':\n              _this.$Notice.success({\n                title: '发送邮件成功',\n                desc: '请打开邮件查收验证码 '\n              });\n\n              _this.capta = res.data.data.capta;\n              break;\n\n            case 'Z1001':\n              _this.$Notice.error({\n                title: '发送邮件失败',\n                desc: '系统发生异常,请稍后再次尝试'\n              });\n\n              break;\n\n            case 'Z1002':\n              _this.$Notice.error({\n                title: '发送邮件失败',\n                desc: '系统发生异常,请稍后再次尝试'\n              });\n\n              break;\n\n            default:\n              break;\n          }\n        });\n      }\n    },\n    handleSubmit: function handleSubmit() {\n      var _this2 = this;\n\n      this.$refs.FindpasswordForm.validate(function (valid) {\n        if (valid) {\n          _this2.$emit('on-success-valid', {\n            username: _this2.form.username,\n            email: _this2.form.email,\n            password: _this2.form.password,\n            checknum: _this2.form.checknum,\n            capta: _this2.capta\n          });\n        }\n      });\n    },\n    ToLogin: function ToLogin() {\n      var _this3 = this;\n\n      setTimeout(function () {\n        _this3.$router.push({\n          path: '/login'\n        });\n      }, 1000);\n    }\n  }\n};",null]}