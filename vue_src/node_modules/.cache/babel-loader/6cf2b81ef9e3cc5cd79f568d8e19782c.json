{"remainingRequest":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\dscjh\\Desktop\\note\\vue\\src\\libs\\crypto.js","dependencies":[{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\src\\libs\\crypto.js","mtime":1578482485119},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\.babelrc","mtime":1569934280000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-array\";\nimport { JSEncrypt } from 'jsencrypt'; // Convert a hex string to a byte array  16进制转byte数组\n\nfunction hexToBytes(hex) {\n  for (var bytes = [], c = 0; c < hex.length; c += 2) {\n    bytes.push(parseInt(hex.substr(c, 2), 16));\n  }\n\n  return bytes;\n}\n\nJSEncrypt.prototype.encryptLong2 = function (string) {\n  var k = this.getKey();\n\n  try {\n    var ct = \"\"; //RSA每次加密最大117bytes，需要辅助方法判断字符串截取位置\n    //1.获取字符串截取点\n\n    var bytes = new Array();\n    bytes.push(0);\n    var byteNo = 0;\n    var len, c;\n    len = string.length;\n    var temp = 0;\n\n    for (var i = 0; i < len; i++) {\n      c = string.charCodeAt(i);\n\n      if (c >= 0x010000 && c <= 0x10FFFF) {\n        byteNo += 4;\n      } else if (c >= 0x000800 && c <= 0x00FFFF) {\n        byteNo += 3;\n      } else if (c >= 0x000080 && c <= 0x0007FF) {\n        byteNo += 2;\n      } else {\n        byteNo += 1;\n      }\n\n      if (byteNo % 117 >= 114 || byteNo % 117 == 0) {\n        if (byteNo - temp >= 114) {\n          bytes.push(i);\n          temp = byteNo;\n        }\n      }\n    } //2.截取字符串并分段加密\n\n\n    if (bytes.length > 1) {\n      for (var i = 0; i < bytes.length - 1; i++) {\n        var str;\n\n        if (i == 0) {\n          str = string.substring(0, bytes[i + 1] + 1);\n        } else {\n          str = string.substring(bytes[i] + 1, bytes[i + 1] + 1);\n        }\n\n        var t1 = k.encrypt(str);\n        ct += t1;\n      }\n\n      ;\n\n      if (bytes[bytes.length - 1] != string.length - 1) {\n        var lastStr = string.substring(bytes[bytes.length - 1] + 1);\n        ct += k.encrypt(lastStr);\n      }\n\n      return hexToBytes(ct);\n    }\n\n    var t = k.encrypt(string);\n    var y = hexToBytes(t);\n    return y;\n  } catch (ex) {\n    return false;\n  }\n};\n\nfunction arrayBufferToBase64(buffer) {\n  var binary = '';\n  var bytes = new Uint8Array(buffer);\n  var len = bytes.byteLength;\n\n  for (var i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n\n  return window.btoa(binary);\n}\n\nexport function Encrypt(data) {\n  var encrypt = new JSEncrypt();\n  encrypt.setPublicKey('-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDbqZCwjBRSKd64fM/ortRglY/VIP+qdqB2rk3EKmWQnhwMREqSoUwVnyPQqj61mVguox1rh4LSgyRvAzYJc9FUKvDkcKsUm07qgzUhbS/B6XpdGqLlh+ror/J2CJuwn3KQDfgMg5gb4Bi98yo0CAfOYo3QqrPmXthBbEHuCyvasQIDAQAB-----END PUBLIC KEY-----'); // 公钥\n\n  var getrsadata = arrayBufferToBase64(encrypt.encryptLong2(data)); //将加密的数据转码为base64\n\n  return getrsadata; //加密后的数据\n}\nexport default {\n  Encrypt: Encrypt\n};",null]}