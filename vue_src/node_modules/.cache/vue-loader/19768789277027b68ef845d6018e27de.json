{"remainingRequest":"C:\\Users\\dscjh\\Desktop\\临兵\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\dscjh\\Desktop\\临兵\\vue\\src\\components\\login-form\\login-form.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\dscjh\\Desktop\\临兵\\vue\\src\\components\\login-form\\login-form.vue","mtime":1573778815000},{"path":"C:\\Users\\dscjh\\Desktop\\临兵\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\临兵\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\临兵\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\临兵\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {loginusername, ispassword} from '../../libs/validate'\nimport {Encrypt}  from '../../libs/crypto'\nexport default {\n  name: 'LoginForm',\n  props: {\n    userNameRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: loginusername  }\n        ]\n      }\n    },\n    passwordRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ispassword }\n        ]\n      }\n    }\n  },\n  data () {\n    return {\n      form: {\n        username: '',\n        password: ''\n      }\n    }\n  },\n  computed: {\n    rules () {\n      return {\n        username: this.userNameRules,\n        password: this.passwordRules\n      }\n    }\n  },\n  methods: {\n    handleSubmit () {\n      this.$refs.LoginForm.validate( (valid) => {\n        if (valid) {\n          this.$emit('on-success-valid', {\n            username: this.form.username,\n            password: this.form.password\n          })\n        }\n      })\n    },\n  Toregister () {\n      setTimeout(() => {\n        this.$router.push({\n        path: '/register'\n        })\n      },1000)\n  },\n  Tofindpassword () {\n      setTimeout(() => {\n        this.$router.push({\n        path: '/findpassword'\n        })\n      },1000)\n  }\n }\n}\n",{"version":3,"sources":["login-form.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"login-form.vue","sourceRoot":"src/components/login-form","sourcesContent":["<template>\n  <Form ref=\"LoginForm\" :model=\"form\" :rules=\"rules\" @keydown.enter.native=\"handleSubmit\">\n    <FormItem prop=\"username\">\n      <Input v-model=\"form.username\" placeholder=\"请输入用户名,1-10位字母数字\">\n        <span slot=\"prepend\">\n          <Icon :size=\"16\" type=\"ios-person\"></Icon>\n        </span>\n      </Input>\n    </FormItem>\n    <FormItem prop=\"password\">\n      <Input type=\"password\" v-model=\"form.password\" placeholder=\"请输入密码,8-16位字母数字\">\n        <span slot=\"prepend\">\n          <Icon :size=\"14\" type=\"md-lock\"></Icon>\n        </span>\n      </Input>\n    </FormItem>\n    <FormItem>\n      <Button @click=\"handleSubmit\" type=\"primary\" long>登录</Button>\n    </FormItem>\n    <FormItem>\n      <Button @click=\"Toregister\" type=\"primary\" long>没有账号?马上注册</Button>\n    </FormItem>\n    <FormItem>\n      <Button @click=\"Tofindpassword\" type=\"primary\" long>忘记密码?马上找回</Button>\n    </FormItem>\n  </Form>\n</template>\n<script>\nimport {loginusername, ispassword} from '../../libs/validate'\nimport {Encrypt}  from '../../libs/crypto'\nexport default {\n  name: 'LoginForm',\n  props: {\n    userNameRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: loginusername  }\n        ]\n      }\n    },\n    passwordRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ispassword }\n        ]\n      }\n    }\n  },\n  data () {\n    return {\n      form: {\n        username: '',\n        password: ''\n      }\n    }\n  },\n  computed: {\n    rules () {\n      return {\n        username: this.userNameRules,\n        password: this.passwordRules\n      }\n    }\n  },\n  methods: {\n    handleSubmit () {\n      this.$refs.LoginForm.validate( (valid) => {\n        if (valid) {\n          this.$emit('on-success-valid', {\n            username: this.form.username,\n            password: this.form.password\n          })\n        }\n      })\n    },\n  Toregister () {\n      setTimeout(() => {\n        this.$router.push({\n        path: '/register'\n        })\n      },1000)\n  },\n  Tofindpassword () {\n      setTimeout(() => {\n        this.$router.push({\n        path: '/findpassword'\n        })\n      },1000)\n  }\n }\n}\n</script>\n"]}]}