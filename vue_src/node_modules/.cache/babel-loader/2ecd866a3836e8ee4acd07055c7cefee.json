{"remainingRequest":"D:\\Tools\\zhenjinote\\note\\gaizao\\node_modules\\babel-loader\\lib\\index.js!D:\\Tools\\zhenjinote\\note\\gaizao\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\Tools\\zhenjinote\\note\\gaizao\\src\\libs\\crypto.js","dependencies":[{"path":"D:\\Tools\\zhenjinote\\note\\gaizao\\src\\libs\\crypto.js","mtime":1558348682000},{"path":"D:\\Tools\\zhenjinote\\note\\gaizao\\.babelrc","mtime":1557223479000},{"path":"D:\\Tools\\zhenjinote\\note\\gaizao\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Tools\\zhenjinote\\note\\gaizao\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Tools\\zhenjinote\\note\\gaizao\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\n\nvar CryptoJS = require('crypto-js'); //引用AES源码js\n\n\nvar key = CryptoJS.enc.Utf8.parse(\"3524983486GBJKLF\"); //十六位十六进制数作为秘钥\n\nvar iv = CryptoJS.enc.Utf8.parse('ABCDEF1234123412'); //十六位十六进制数作为秘钥偏移量\n//解密方法\n\nexport function Decrypt(word) {\n  var encryptedHexStr = CryptoJS.enc.Hex.parse(word);\n  var srcs = CryptoJS.enc.Base64.stringify(encryptedHexStr);\n  var decrypt = CryptoJS.AES.decrypt(srcs, key, {\n    iv: iv,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n  var decryptedStr = decrypt.toString(CryptoJS.enc.Utf8);\n  return decryptedStr.toString();\n} //加密方法\n\nexport function Encrypt(word) {\n  var srcs = CryptoJS.enc.Utf8.parse(word);\n  var encrypted = CryptoJS.AES.encrypt(srcs, key, {\n    iv: iv,\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n  return encrypted.ciphertext.toString().toUpperCase();\n}",{"version":3,"sources":["D:\\Tools\\zhenjinote\\note\\gaizao\\src\\libs\\crypto.js"],"names":["CryptoJS","require","key","enc","Utf8","parse","iv","Decrypt","word","encryptedHexStr","Hex","srcs","Base64","stringify","decrypt","AES","mode","CBC","padding","pad","Pkcs7","decryptedStr","toString","Encrypt","encrypted","encrypt","ciphertext","toUpperCase"],"mappings":";;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB,C,CAAwC;;;AAExC,IAAMC,GAAG,GAAGF,QAAQ,CAACG,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwB,kBAAxB,CAAZ,C,CAAyD;;AACzD,IAAMC,EAAE,GAAGN,QAAQ,CAACG,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwB,kBAAxB,CAAX,C,CAAwD;AAExD;;AACA,OAAO,SAASE,OAAT,CAAiBC,IAAjB,EAAuB;AAC1B,MAAIC,eAAe,GAAGT,QAAQ,CAACG,GAAT,CAAaO,GAAb,CAAiBL,KAAjB,CAAuBG,IAAvB,CAAtB;AACA,MAAIG,IAAI,GAAGX,QAAQ,CAACG,GAAT,CAAaS,MAAb,CAAoBC,SAApB,CAA8BJ,eAA9B,CAAX;AACA,MAAIK,OAAO,GAAGd,QAAQ,CAACe,GAAT,CAAaD,OAAb,CAAqBH,IAArB,EAA2BT,GAA3B,EAAgC;AAAEI,IAAAA,EAAE,EAAEA,EAAN;AAAUU,IAAAA,IAAI,EAAEhB,QAAQ,CAACgB,IAAT,CAAcC,GAA9B;AAAmCC,IAAAA,OAAO,EAAElB,QAAQ,CAACmB,GAAT,CAAaC;AAAzD,GAAhC,CAAd;AACA,MAAIC,YAAY,GAAGP,OAAO,CAACQ,QAAR,CAAiBtB,QAAQ,CAACG,GAAT,CAAaC,IAA9B,CAAnB;AACA,SAAOiB,YAAY,CAACC,QAAb,EAAP;AACH,C,CACD;;AACA,OAAO,SAASC,OAAT,CAAiBf,IAAjB,EAAuB;AAC1B,MAAIG,IAAI,GAAGX,QAAQ,CAACG,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBG,IAAxB,CAAX;AACA,MAAIgB,SAAS,GAAGxB,QAAQ,CAACe,GAAT,CAAaU,OAAb,CAAqBd,IAArB,EAA2BT,GAA3B,EAAgC;AAAEI,IAAAA,EAAE,EAAEA,EAAN;AAAUU,IAAAA,IAAI,EAAEhB,QAAQ,CAACgB,IAAT,CAAcC,GAA9B;AAAmCC,IAAAA,OAAO,EAAElB,QAAQ,CAACmB,GAAT,CAAaC;AAAzD,GAAhC,CAAhB;AACA,SAAOI,SAAS,CAACE,UAAV,CAAqBJ,QAArB,GAAgCK,WAAhC,EAAP;AACH","sourcesContent":["const CryptoJS = require('crypto-js');  //引用AES源码js\n\nconst key = CryptoJS.enc.Utf8.parse(\"3524983486GBJKLF\"); //十六位十六进制数作为秘钥\nconst iv = CryptoJS.enc.Utf8.parse('ABCDEF1234123412'); //十六位十六进制数作为秘钥偏移量\n\n//解密方法\nexport function Decrypt(word) {\n    let encryptedHexStr = CryptoJS.enc.Hex.parse(word);\n    let srcs = CryptoJS.enc.Base64.stringify(encryptedHexStr);\n    let decrypt = CryptoJS.AES.decrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });\n    let decryptedStr = decrypt.toString(CryptoJS.enc.Utf8);\n    return decryptedStr.toString();\n}\n//加密方法\nexport function Encrypt(word) {\n    let srcs = CryptoJS.enc.Utf8.parse(word);\n    let encrypted = CryptoJS.AES.encrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });\n    return encrypted.ciphertext.toString().toUpperCase();\n}\n\n"]}]}