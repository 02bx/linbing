{"remainingRequest":"D:\\Tools\\zhenjinote\\note\\gaizao\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Tools\\zhenjinote\\note\\gaizao\\src\\components\\register-form\\register-form.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Tools\\zhenjinote\\note\\gaizao\\src\\components\\register-form\\register-form.vue","mtime":1558489079000},{"path":"D:\\Tools\\zhenjinote\\note\\gaizao\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Tools\\zhenjinote\\note\\gaizao\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Tools\\zhenjinote\\note\\gaizao\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Tools\\zhenjinote\\note\\gaizao\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {isEmail, isWscnEmail, isUsername, ischeckNum, isPassword} from '../../libs/validate.js'\nimport {Encrypt}  from '../../libs/crypto'\nexport default {\n  name: 'RegisterForm',\n  props: {\n    userNameRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isUsername }\n        ]\n      }\n    },\n    eMailRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isEmail }\n        ]\n      }\n    },\n    checkNumRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ischeckNum }\n        ]\n      }\n    },\n    passwordRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isPassword }\n        ]\n      }\n    },\n    passwordConfirmRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isPassword }\n        ]\n      }\n    }\n  },\n  data () {\n    return {\n      sendmail_result: false,\n      capta: '',\n      form: {\n        userName: '',\n        eMail: '',\n        checkNum: '',\n        password: '',\n        passwordConfirm: ''\n      }\n    }\n  },\n  computed: {\n    rules () {\n      return {\n        userName: this.userNameRules,\n        eMail: this.eMailRules,\n        checkNum: this.checkNumRules,\n        password: this.passwordRules,\n        passwordConfirm: this.passwordConfirmRules\n      }\n    }\n  },\n  methods: {\n    getcheckNum () {\n        if (!isWscnEmail(this.form.email)) {\n            alert('请输入正确的合法邮箱以来获取注册码')\n        }\n        else {\n           let params = new URLSearchParams()\n           params.append('email', this.form.email)\n           this.axios.post('/getcheckNum', params).then((res) => {\n           //console.log(res)\n           //console.log(res.data)\n           if (res.data == \"0\") {\n              alert('发送邮件失败')\n              setTimeout(function () {\n              }.bind(this), 1000)\n            }\n           else {\n              alert('发送邮件成功')\n              this.capta = res.data\n              //console.log(this.capta)\n              this.sendmail_result = true\n              setTimeout(function () {\n              }.bind(this), 1000)\n            }\n            })\n        }\n    },\n    handleSubmit () {\n      this.$refs.RegisterForm.validate((valid) => {\n        if (valid) {\n            if (this.sendmail_result == 'flase') {\n                alert('请先获取注册码！')\n            }\n            else {\n                if (this.form.checkNum != this.capta) {\n                    alert('注册码输入错误,请重新输入！')\n                }\n                else {\n                    if (this.form.password != this.passwordConfirm) {\n                        alert('二次密码输入不一致，请重新输入密码！')\n                    }\n                    else {\n                        let params = new URLSearchParams()\n                        params.append('username', Encrypt(this.form.username))\n                        params.append('email', Encrypt(this.form.email))\n                        params.append('password', Encrypt(this.form.password))\n                        this.axios.post('/register', params).then((res) => {\n                        if (res.data == \"1\") {\n                            this.$router.push({\n                                path: '/login'\n                            })\n                            this.new_username = ''\n                            this.new_password = ''\n                            setTimeout(function () {\n                            }.bind(this), 1000)\n                        }\n                        else if(res.data == \"-1\"){\n                            alert(\"注册失败！\")\n                        }\n                        else {\n                            alert(\"系统错误！\")\n                            setTimeout(function () {\n                            }.bind(this), 1000)\n                        }\n                        })\n                    }\n                    \n                }\n            }\n        }\n        else {\n          //console.log('error submit!!')\n          return false\n        }\n          \n       })\n    },\n    ToLogin () {\n      this.$router.push({\n        path: '/login'\n      })\n    }\n  }  \n}\n",{"version":3,"sources":["register-form.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"register-form.vue","sourceRoot":"src/components/register-form","sourcesContent":["<template>\n  \n  <Form ref=\"RegisterForm\" :model=\"form\" :rules=\"rules\" @keydown.enter.native=\"handleSubmit\">\n    <FormItem prop=\"userName\">\n      <Input v-model=\"form.userName\" placeholder=\"请输入用户名\">\n        <span slot=\"prepend\">\n          <Icon :size=\"16\" type=\"ios-contact\"></Icon>\n        </span>\n      </Input>\n    </FormItem>\n    <FormItem prop=\"eMail\">\n      <Input v-model=\"form.eMail\" placeholder=\"请输入邮箱地址\">\n        <span slot=\"prepend\">\n          <Icon :size=\"16\" type=\"ios-mail\"></Icon>\n        </span>\n      </Input>\n    </FormItem>\n    <FormItem prop=\"checkNum\">\n      <Input v-model=\"form.checkNum\" placeholder=\"请输入注册码\">\n        <span slot=\"prepend\">\n          <Icon :size=\"16\" type=\"ios-key\"></Icon>\n        </span>\n      </Input>\n      <Button style=\"position:absolute; right:-100px; top: 2px;\" type=\"primary\" float: left @click=\"getcheckNum\">获取注册码</Button>\n    </FormItem>\n    <FormItem prop=\"password\">\n      <Input type=\"password\" v-model=\"form.password\" placeholder=\"请输入密码\">\n        <span slot=\"prepend\">\n          <Icon :size=\"14\" type=\"md-lock\"></Icon>\n        </span>\n      </Input>\n    </FormItem>\n    <FormItem prop=\"passwordConfirm\">\n      <Input type=\"password\" v-model=\"form.passwordConfirm\" placeholder=\"请再次输入密码\">\n        <span slot=\"prepend\">\n          <Icon :size=\"14\" type=\"md-lock\"></Icon>\n        </span>\n      </Input>\n    </FormItem>\n    <FormItem>\n      <Button @click=\"handleSubmit\" type=\"primary\" long>注册</Button>\n    </FormItem>\n     <FormItem>\n      <Button @click=\"ToLogin\" type=\"primary\" long>已有账号?马上登录</Button>\n    </FormItem>\n  </Form>\n</template>\n\n<script>\nimport {isEmail, isWscnEmail, isUsername, ischeckNum, isPassword} from '../../libs/validate.js'\nimport {Encrypt}  from '../../libs/crypto'\nexport default {\n  name: 'RegisterForm',\n  props: {\n    userNameRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isUsername }\n        ]\n      }\n    },\n    eMailRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isEmail }\n        ]\n      }\n    },\n    checkNumRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ischeckNum }\n        ]\n      }\n    },\n    passwordRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isPassword }\n        ]\n      }\n    },\n    passwordConfirmRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isPassword }\n        ]\n      }\n    }\n  },\n  data () {\n    return {\n      sendmail_result: false,\n      capta: '',\n      form: {\n        userName: '',\n        eMail: '',\n        checkNum: '',\n        password: '',\n        passwordConfirm: ''\n      }\n    }\n  },\n  computed: {\n    rules () {\n      return {\n        userName: this.userNameRules,\n        eMail: this.eMailRules,\n        checkNum: this.checkNumRules,\n        password: this.passwordRules,\n        passwordConfirm: this.passwordConfirmRules\n      }\n    }\n  },\n  methods: {\n    getcheckNum () {\n        if (!isWscnEmail(this.form.email)) {\n            alert('请输入正确的合法邮箱以来获取注册码')\n        }\n        else {\n           let params = new URLSearchParams()\n           params.append('email', this.form.email)\n           this.axios.post('/getcheckNum', params).then((res) => {\n           //console.log(res)\n           //console.log(res.data)\n           if (res.data == \"0\") {\n              alert('发送邮件失败')\n              setTimeout(function () {\n              }.bind(this), 1000)\n            }\n           else {\n              alert('发送邮件成功')\n              this.capta = res.data\n              //console.log(this.capta)\n              this.sendmail_result = true\n              setTimeout(function () {\n              }.bind(this), 1000)\n            }\n            })\n        }\n    },\n    handleSubmit () {\n      this.$refs.RegisterForm.validate((valid) => {\n        if (valid) {\n            if (this.sendmail_result == 'flase') {\n                alert('请先获取注册码！')\n            }\n            else {\n                if (this.form.checkNum != this.capta) {\n                    alert('注册码输入错误,请重新输入！')\n                }\n                else {\n                    if (this.form.password != this.passwordConfirm) {\n                        alert('二次密码输入不一致，请重新输入密码！')\n                    }\n                    else {\n                        let params = new URLSearchParams()\n                        params.append('username', Encrypt(this.form.username))\n                        params.append('email', Encrypt(this.form.email))\n                        params.append('password', Encrypt(this.form.password))\n                        this.axios.post('/register', params).then((res) => {\n                        if (res.data == \"1\") {\n                            this.$router.push({\n                                path: '/login'\n                            })\n                            this.new_username = ''\n                            this.new_password = ''\n                            setTimeout(function () {\n                            }.bind(this), 1000)\n                        }\n                        else if(res.data == \"-1\"){\n                            alert(\"注册失败！\")\n                        }\n                        else {\n                            alert(\"系统错误！\")\n                            setTimeout(function () {\n                            }.bind(this), 1000)\n                        }\n                        })\n                    }\n                    \n                }\n            }\n        }\n        else {\n          //console.log('error submit!!')\n          return false\n        }\n          \n       })\n    },\n    ToLogin () {\n      this.$router.push({\n        path: '/login'\n      })\n    }\n  }  \n}\n</script>\n"]}]}