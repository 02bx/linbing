{"remainingRequest":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\dscjh\\Desktop\\note\\vue\\src\\view\\components\\markdown\\markdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\src\\view\\components\\markdown\\markdown.vue","mtime":1572689177000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios'\nimport http from '@/libs/http'\nimport AES from '@/libs/crypto'\nimport {getToken } from '@/libs/util'\nexport default {\n  inject: ['reload'],\n  name: 'MarkdownEditor',\n  data () {\n    return {\n      notename: '',\n      content: '',\n      flag : '',\n      token: getToken(),\n      publish_flag: '0',\n      img_file: {}\n    }\n  },\n  methods: {\n    handlnotename () {\n      if (this.notename == \"\"){\n        this.$Notice.error({\n                  title: '笔记名字不能为空',\n                  desc: '请输入笔记名字 '\n          })\n      }\n      else{\n        let data = {\n            'type': 'notename', \n            'token': this.token,\n            'data': AES.Encrypt(this.notename)\n        }\n        data = JSON.stringify(data)\n        let params = {'data': AES.Encrypt(data)}\n        http.post('/api/query', params).then((res) => {\n            res.data = eval('(' + res.data + ')')\n            switch(res.data.code ){\n                case 'Z1001':\n                this.$Notice.error({\n                  title: '系统异常',\n                  desc: '系统发生异常,请稍后再次尝试'\n                })\n                break\n                case 'Z1002':\n                this.$Notice.error({\n                  title: '系统异常',\n                  desc: '系统发生异常,请稍后再次尝试'\n                })\n                break\n                case 'Z1004':\n                this.$Notice.error({\n                  title: '认证失败',\n                  desc: '认证失败,请稍后再次尝试'\n                })\n                break\n                case 'Z10010':\n                this.flag = '1'\n                this.$Notice.error({\n                  title: '笔记已存在',\n                  desc: '笔记名字已存在,请重新输入笔记名字'\n                })\n                break\n                default:\n                break\n            }\n        })\n      }\n    },\n    change (status) {\n      if (status){\n        this.publish_flag = '1'\n      }\n      else{\n        this.publish_flag = '0'\n      }\n    },\n    handleSubmit () {\n      if (this.notename == \"\"){\n        this.$Notice.error({\n          title: '笔记名字不能为空',\n          desc: '请输入笔记名字 '\n          })\n      }\n      else{\n        if (this.flag == \"1\"){\n          this.$Notice.error({\n            title: '笔记已存在',\n            desc: '笔记名字已存在,请重新输入笔记名字'\n          })\n        }\n        else{\n          if (this.content == \"\"){\n            this.$Notice.error({\n                    title: '笔记内容不能为空',\n                    desc: '请输入笔记内容'\n            })\n          }\n          else{\n            let data = {\n              'token': this.token,\n              'notename': AES.Encrypt(this.notename),\n              'content': AES.Encrypt(this.$refs.md.d_render),\n              'publish_flag': this.publish_flag,\n              'trash_flag': '0'\n            }\n            //console.log(this.$refs.md.d_render)\n            //console.log(this.$refs.md.d_value)\n            data = JSON.stringify(data)\n            let params = {'data': AES.Encrypt(data)}\n            http.post('/api/save', params).then((res) => {\n                res.data = eval('(' + res.data + ')')\n                switch(res.data.code ){\n                    case 'Z1000':\n                    this.$Notice.success({\n                      title: '保存成功',\n                      desc: '笔记保存成功,请到笔记列表查看'\n                    })\n                    setTimeout(() => {\n                      this.$router.push({\n                      path: '/components/notelist'\n                      })\n                    },1000)\n                    break\n                    case 'Z1001':\n                    this.$Notice.error({\n                      title: '系统异常',\n                      desc: '系统发生异常,请稍后再次尝试'\n                    })\n                    break\n                    case 'Z1002':\n                    this.$Notice.error({\n                      title: '系统异常',\n                      desc: '系统发生异常,请稍后再次尝试'\n                    })\n                    break\n                    case 'Z1004':\n                    this.$Notice.error({\n                      title: '认证失败',\n                      desc: '认证失败,请稍后再次尝试'\n                    })\n                    break\n                    case 'Z10010':\n                    this.flag = '1'\n                    this.$Notice.error({\n                      title: '笔记已存在',\n                      desc: '笔记名字已存在,请重新输入笔记名字'\n                    })\n                    break\n                    default:\n                    break\n                }\n            })\n          }\n        }\n      }\n    },\n    $imgAdd(pos, $file){\n          // 第一步.将图片上传到服务器.\n          const instance = axios.create({\n            withCredentials: true\n          })\n          var formdata = new FormData()\n          formdata.append('file', $file)\n          formdata.append('token', this.token)\n          this.img_file[pos] = $file\n          instance({\n              url: '/api/upload',\n              method: 'post',\n              data: formdata,\n              headers: { 'Content-Type': 'multipart/form-data' },\n          }).then((res) => {\n            res.data = eval('(' + res.data + ')')\n            switch(res.data.code ){\n                case 'Z10010':\n                this.$Notice.success({\n                  title: '上传成功',\n                  desc: res.data.message\n                })\n                this.$refs.md.$img2Url(pos, res.data.data)\n                break\n                case 'Z1001':\n                this.$Notice.error({\n                  title: '系统异常',\n                  desc: '系统发生异常,请稍后再次尝试'\n                 })\n                break\n                case 'Z1004':\n                this.$Notice.error({\n                  title: '认证失败',\n                  desc: '认证失败,请稍后再次尝试'\n                })\n                break\n                case 'Z10011':\n                this.$Notice.error({\n                  title: '上传异常',\n                  desc: '上传失败,请稍候重试!'\n                })\n                break\n                case 'Z10012':\n                this.$Notice.error({\n                  title: '上传异常',\n                  desc: '上传文件名为空,请添加文件名'\n                })\n                break\n                case 'Z10013':\n                this.$Notice.error({\n                  title: '上传异常',\n                  desc: '上传文件格式不正确,请稍候重试'\n                })\n                break\n                default:\n                break\n            }\n              // 第二步.将返回的url替换到文本原位置![...](0) -> ![...](url)\n              /**\n              * $vm 指为mavonEditor实例，可以通过如下两种方式获取\n              * 1. 通过引入对象获取: `import {mavonEditor} from ...` 等方式引入后，`$vm`为`mavonEditor`\n              * 2. 通过$refs获取: html声明ref : `<mavon-editor ref=md ></mavon-editor>，`$vm`为 `this.$refs.md`\n              */\n            \n          })\n     },\n     $imgDel(pos) {\n       delete this.img_file[pos]\n     }\n  }\n}\n",null]}