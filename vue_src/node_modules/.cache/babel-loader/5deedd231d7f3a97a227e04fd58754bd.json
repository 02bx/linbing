{"remainingRequest":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\dscjh\\Desktop\\note\\vue\\src\\components\\findpassword-form\\findpassword.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\src\\components\\findpassword-form\\findpassword.vue","mtime":1578383939736},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\.babelrc","mtime":1569934280000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dscjh\\Desktop\\note\\vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { isemail, isusername, ischecknum, ispassword } from '@/libs/validate';\nimport RSA from '@/libs/crypto';\nimport http from '@/libs/http';\nexport default {\n  name: 'FindpasswordForm',\n  props: {\n    usernameRules: {\n      type: Array,\n      default: function _default() {\n        return [{\n          required: true,\n          trigger: 'blur',\n          validator: isusername,\n          min: 1\n        }];\n      }\n    },\n    emailRules: {\n      type: Array,\n      default: function _default() {\n        return [{\n          required: true,\n          trigger: 'blur',\n          validator: isemail\n        }];\n      }\n    },\n    checknumRules: {\n      type: Array,\n      default: function _default() {\n        return [{\n          required: true,\n          trigger: 'blur',\n          validator: ischecknum\n        }];\n      }\n    },\n    passwordRules: {\n      type: Array,\n      default: function _default() {\n        return [{\n          required: true,\n          trigger: 'blur',\n          validator: ispassword\n        }];\n      }\n    },\n    passwordconfirmRules: {\n      type: Array,\n      default: function _default() {\n        return [{\n          required: true,\n          trigger: 'blur',\n          validator: ispassword\n        }];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      capta: '',\n      form: {\n        username: '',\n        email: '',\n        checknum: '',\n        password: '',\n        passwordconfirm: ''\n      },\n      username: {\n        'type': 'username',\n        'data': ''\n      }\n    };\n  },\n  computed: {\n    rules: function rules() {\n      return {\n        username: this.usernameRules,\n        email: this.emailRules,\n        checknum: this.checknumRules,\n        password: this.passwordRules,\n        passwordconfirm: this.passwordconfirmRules\n      };\n    }\n  },\n  methods: {\n    handleusername: function handleusername() {\n      this.$refs.FindpasswordForm.validateField('username', function (valid) {});\n    },\n    handlemail: function handlemail() {\n      this.$refs.FindpasswordForm.validateField('email', function (valid) {});\n    },\n    getchecknum: function getchecknum() {\n      var _this = this;\n\n      if (this.form.email == '') {\n        this.$refs.FindpasswordForm.validateField('email', function (valid) {});\n      } else {\n        var data = {\n          'type': 'email',\n          'data': this.form.email\n        };\n        data = JSON.stringify(data);\n        var params = {\n          'data': RSA.Encrypt(data)\n        };\n        http.post('/api/getchecknum', params).then(function (res) {\n          res.data = eval('(' + res.data + ')');\n\n          switch (res.data.code) {\n            case 'Z1000':\n              _this.$Notice.success({\n                title: '发送邮件成功',\n                desc: '请打开邮件查收验证码 '\n              });\n\n              _this.capta = res.data.data.capta;\n              break;\n\n            case 'Z1001':\n              _this.$Notice.error({\n                title: '发送邮件失败',\n                desc: '系统发生异常,请稍后再次尝试'\n              });\n\n              break;\n\n            case 'Z1002':\n              _this.$Notice.error({\n                title: '发送邮件失败',\n                desc: '系统发生异常,请稍后再次尝试'\n              });\n\n              break;\n\n            default:\n              break;\n          }\n        });\n      }\n    },\n    handleSubmit: function handleSubmit() {\n      var _this2 = this;\n\n      this.$refs.FindpasswordForm.validate(function (valid) {\n        if (valid) {\n          _this2.$emit('on-success-valid', {\n            username: _this2.form.username,\n            email: _this2.form.email,\n            password: _this2.form.password,\n            checknum: _this2.form.checknum,\n            capta: _this2.capta\n          });\n        }\n      });\n    },\n    ToLogin: function ToLogin() {\n      var _this3 = this;\n\n      setTimeout(function () {\n        _this3.$router.push({\n          path: '/login'\n        });\n      }, 1000);\n    }\n  }\n};",{"version":3,"sources":["findpassword.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  \n  <Form ref = \"FindpasswordForm\" :model=\"form\" :rules=\"rules\" @keydown.enter.native=\"handleSubmit\">\n    <FormItem prop = \"username\"> \n      <Input  @on-blur = \"handleusername()\" v-model=\"form.username\" placeholder=\"请输入用户名\">\n        <span slot=\"prepend\">\n          <Icon :size=\"16\" type=\"ios-contact\"></Icon>\n        </span>\n      </Input>\n    </FormItem>\n    <FormItem prop=\"email\">\n      <Input  @on-blur = \"handlemail()\"  v-model=\"form.email\" placeholder=\"请输入邮箱地址\">\n        <span slot=\"prepend\">\n          <Icon :size=\"16\" type=\"ios-mail\"></Icon>\n        </span>\n      </Input>\n    </FormItem>\n    <FormItem prop=\"checknum\">\n      <Input  v-model=\"form.checknum\"  placeholder=\"请输入验证码\"  style=\"width: 170px\">\n        <span slot=\"prepend\">\n          <Icon :size=\"16\" type=\"ios-key\"></Icon>\n        </span>\n      </Input>\n      <Button style=\"position:absolute; right: 0px; top: 2px;\" type=\"primary\" float: left @click=\"getchecknum\">获取验证码</Button>\n    </FormItem>\n    <FormItem prop=\"password\">\n      <Input type=\"password\" v-model=\"form.password\" placeholder=\"请输入新密码,8-16位字母数字\">\n        <span slot=\"prepend\">\n          <Icon :size=\"14\" type=\"md-lock\"></Icon>\n        </span>\n      </Input>\n    </FormItem>\n    <FormItem prop=\"passwordconfirm\">\n      <Input type=\"password\" v-model=\"form.passwordconfirm\" placeholder=\"请再次输入新密码,8-16位字母数字\">\n        <span slot=\"prepend\">\n          <Icon :size=\"14\" type=\"md-lock\"></Icon>\n        </span>\n      </Input>\n    </FormItem>\n    <FormItem>\n      <Button @click=\"handleSubmit\" type=\"primary\" long>重置密码</Button>\n    </FormItem>\n  </Form>\n</template>\n\n<script>\nimport {isemail, isusername, ischecknum, ispassword} from '@/libs/validate'\nimport RSA  from '@/libs/crypto'\nimport http  from '@/libs/http'\nexport default {\n  name: 'FindpasswordForm',\n  props: {\n    usernameRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isusername, min:1},\n        ]\n      }\n    },\n    emailRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: isemail }\n        ]\n      }\n    },\n    checknumRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ischecknum }\n        ]\n      }\n    },\n    passwordRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ispassword }\n        ]\n      }\n    },\n    passwordconfirmRules: {\n      type: Array,\n      default: () => {\n        return [\n          { required: true, trigger: 'blur', validator: ispassword }\n        ]\n      }\n    }\n  },\n  data () {\n    return {\n      capta: '',\n      form: {\n        username: '',\n        email: '',\n        checknum: '',\n        password: '',\n        passwordconfirm: ''\n      },\n      username: {\n        'type': 'username', \n        'data': ''\n      }\n    }\n  },\n  computed: {\n    rules () {\n      return {\n        username: this.usernameRules,\n        email: this.emailRules,\n        checknum: this.checknumRules,\n        password: this.passwordRules,\n        passwordconfirm: this.passwordconfirmRules\n      }\n    }\n  },\n  methods: {\n    handleusername () {\n      this.$refs.FindpasswordForm.validateField('username', (valid) => {\n        \n      })\n   },\n\n   handlemail () {\n      this.$refs.FindpasswordForm.validateField('email', (valid) => {\n      })\n   },\n\n    getchecknum () {\n      if (this.form.email== ''){\n        this.$refs.FindpasswordForm.validateField('email', (valid) => {\n        })\n      }\n      else{\n        let data = {\n          'type': 'email', \n          'data': this.form.email\n        }\n        data = JSON.stringify(data)\n        let params = {'data': RSA.Encrypt(data)}\n        http.post('/api/getchecknum', params).then((res) => {\n          res.data = eval('(' + res.data + ')')\n          switch(res.data.code ){\n            case'Z1000':\n            this.$Notice.success({\n                title: '发送邮件成功',\n                desc: '请打开邮件查收验证码 '\n            })\n            this.capta = res.data.data.capta\n            break\n            case 'Z1001':\n            this.$Notice.error({\n                title: '发送邮件失败',\n                desc: '系统发生异常,请稍后再次尝试'\n            })\n            break\n            case 'Z1002':\n            this.$Notice.error({\n                title: '发送邮件失败',\n                desc: '系统发生异常,请稍后再次尝试'\n            })\n            break\n            default:\n            break\n          }\n        })\n      }\n    },\n    handleSubmit () {\n     this.$refs.FindpasswordForm.validate( (valid) => {\n        if (valid) {\n          this.$emit('on-success-valid', {\n            username: this.form.username,\n            email: this.form.email,\n            password: this.form.password,\n            checknum: this.form.checknum,\n            capta: this.capta\n          })\n        }\n      })\n    },\n\n    ToLogin () {\n      setTimeout(() => {\n        this.$router.push({\n        path: '/login'\n        })\n      },1000)\n    }\n  }  \n}\n</script>\n"],"sourceRoot":"src/components/findpassword-form"}]}