{"remainingRequest":"/root/zhenjinote/note/vue/node_modules/babel-loader/lib/index.js!/root/zhenjinote/note/vue/node_modules/eslint-loader/index.js??ref--13-0!/root/zhenjinote/note/vue/src/libs/validate.js","dependencies":[{"path":"/root/zhenjinote/note/vue/src/libs/validate.js","mtime":1564308862782},{"path":"/root/zhenjinote/note/vue/.babelrc","mtime":1569934280915},{"path":"/root/zhenjinote/note/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/zhenjinote/note/vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/root/zhenjinote/note/vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import http from '@/libs/http';\nimport AES from '@/libs/crypto';\n/* 是否是邮箱 */\n\nexport function isemail(rule, value, callback) {\n  var reg = /^[a-z0-9](?:[-_.+]?[a-z0-9]+)*@.*?\\.com$/;\n\n  if (!reg.test(value.trim())) {\n    return callback(new Error('请输入合法邮箱'));\n  } else {\n    var data = {\n      'type': 'email',\n      'data': value\n    };\n    data = JSON.stringify(data);\n    var params = {\n      'data': AES.Encrypt(data)\n    };\n    http.post('/api/query', params).then(function (res) {\n      res.data = eval('(' + res.data + ')');\n\n      switch (res.data.code) {\n        case 'Z1001':\n          return callback(new Error('系统异常'));\n\n        case 'Z1002':\n          return callback(new Error('请求方法异常'));\n\n        case 'Z1007':\n          return callback(new Error('邮箱已注册'));\n\n        default:\n          callback();\n      }\n    });\n  }\n}\n/* 注册时用户名规则 */\n\nexport function isusername(rule, value, callback) {\n  var reg = /^[A-Za-z0-9]{1,6}$/;\n\n  if (!reg.test(value.trim())) {\n    return callback(new Error('用户名输入错误'));\n  } else {\n    var data = {\n      'type': 'username',\n      'data': value\n    };\n    data = JSON.stringify(data);\n    var params = {\n      'data': AES.Encrypt(data)\n    };\n    http.post('/api/query', params).then(function (res) {\n      res.data = eval('(' + res.data + ')');\n\n      switch (res.data.code) {\n        case 'Z1001':\n          return callback(new Error('系统异常'));\n\n        case 'Z1002':\n          return callback(new Error('请求方法异常'));\n\n        case 'Z1006':\n          return callback(new Error('用户名已注册'));\n\n        default:\n          callback();\n      }\n    });\n  }\n}\nexport function loginusername(rule, value, callback) {\n  var reg = /^[A-Za-z0-9]{1,6}$/;\n\n  if (!reg.test(value.trim())) {\n    return callback(new Error('用户名输入错误'));\n  } else {\n    callback();\n  }\n}\n/* 注册码长度是否达到要求 */\n\nexport function ischecknum(rule, value, callback) {\n  var reg = /^[A-Za-z0-9]{6}$/;\n\n  if (!reg.test(value.trim())) {\n    return callback(new Error('注册码输入错误'));\n  } else {\n    callback();\n  }\n}\n/* 密码长度是否达到要求 */\n\nexport function ispassword(rule, value, callback) {\n  var reg = /^[A-Za-z0-9]{8,16}$/;\n\n  if (!reg.test(value.trim())) {\n    return callback(new Error('密码输入错误'));\n  } else {\n    callback();\n  }\n}",{"version":3,"sources":["/root/zhenjinote/note/vue/src/libs/validate.js"],"names":["http","AES","isemail","rule","value","callback","reg","test","trim","Error","data","JSON","stringify","params","Encrypt","post","then","res","eval","code","isusername","loginusername","ischecknum","ispassword"],"mappings":"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","sourcesContent":["import http  from '@/libs/http'\nimport AES  from '@/libs/crypto'\n\n/* 是否是邮箱 */\nexport function isemail (rule, value, callback) {\n    const reg = /^[a-z0-9](?:[-_.+]?[a-z0-9]+)*@.*?\\.com$/\n    if (!reg.test(value.trim())) {\n        return callback(new Error('请输入合法邮箱'));   \n    }\n    else {\n        let data = {\n            'type': 'email', \n            'data': value\n        }\n        data = JSON.stringify(data)\n        let params = {'data': AES.Encrypt(data)}\n        http.post('/api/query', params).then((res) => {\n            res.data = eval('(' + res.data + ')')\n            switch(res.data.code ){\n                case 'Z1001':\n                return callback(new Error('系统异常'))\n                case 'Z1002':\n                return callback(new Error('请求方法异常'))\n                case 'Z1007':\n                return callback(new Error('邮箱已注册'))\n                default:\n                callback()\n            }\n        })\n    }\n}\n\n/* 注册时用户名规则 */\nexport function isusername (rule, value, callback) {\n    const reg = /^[A-Za-z0-9]{1,6}$/\n    if(!reg.test(value.trim())) {\n        return callback(new Error('用户名输入错误'));\n    }\n    else {\n        let data = {\n            'type': 'username', \n            'data': value\n        }\n        data = JSON.stringify(data)\n        let params = {'data': AES.Encrypt(data)}\n        http.post('/api/query', params).then((res) => {\n            res.data = eval('(' + res.data + ')');\n            switch(res.data.code ){\n                case 'Z1001':\n                return callback(new Error('系统异常'))\n                case 'Z1002':\n                return callback(new Error('请求方法异常'))\n                case 'Z1006':\n                return callback(new Error('用户名已注册'))\n                default:\n                callback()\n            }\n        })\n    }\n  }\n\nexport function loginusername (rule, value, callback) {\n    const reg = /^[A-Za-z0-9]{1,6}$/\n    if(!reg.test(value.trim())) {\n        return callback(new Error('用户名输入错误'));\n    }\n    else {\n        callback()\n        }\n}\n\n/* 注册码长度是否达到要求 */\nexport function ischecknum(rule, value, callback) {\n    const reg = /^[A-Za-z0-9]{6}$/\n    if (!reg.test(value.trim())) {\n        return callback(new Error('注册码输入错误'));\n    }\n    else {\n        callback()\n    }\n}\n\n/* 密码长度是否达到要求 */\nexport function ispassword(rule, value, callback) {\n    const reg = /^[A-Za-z0-9]{8,16}$/\n    if (!reg.test(value.trim())) {\n        return callback(new Error('密码输入错误'));\n    }\n    else {\n        callback()\n        }\n}"]}]}